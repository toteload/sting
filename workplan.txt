sting 0.2
-------------------------------------------------------------------------------
Add pathtracing basics to make things pretty kindof :)

[ ] add normals to triangle mesh
    [ ] normal packing and unpacking
[ ] pathtrace with simple cosine weighted hemispherical sampling, limit the
    depth.
[ ] very basic materials: diffuse, mirror, emissive
[ ] environment map

sting 0.3
-------------------------------------------------------------------------------
Adding the wavefront architecture!

sting 0.4
-------------------------------------------------------------------------------
The BVH update!

[ ] MBVH instead of BVH
[ ] top level BVH







Must have features
-------------------------------------------------------------------------------






Just random stuff I may want to add or change but not yet planned in
-------------------------------------------------------------------------------
[ ] nested instancing
[ ] debug statistics: framerate, ms per frame, maybe frame time histogram
[ ] add functionality to have the render buffer size and the screen size
    to be different dimensions
[ ] optimize AABB with SIMD
[ ] improve the camera with fov instead of plane distance
[ ] different materials: diffuse and mirror to start with
[ ] wavefront gpu implementation
[ ] DOF camera
[ ] variance reduction techniques: russian roulette, next event estimation
[ ] add Disney BRDF (looks pretty?)
[ ] random number generation on the GPU or some sort of pseudo random sampling
    BLUE NOISE!

sting 0.1
-------------------------------------------------------------------------------
This version is meant to have a raytracer that can actually render something
at reasonably interactive frame rate.
It will add BVH acceleration structure and loading of triangle
meshes, with intersection of the BVH on the GPU.

[x] bvh building and intersection
[x] loading triangle meshes
[x] uploading triangle mesh bvh to gpu and intersection on the gpu

[x] cleanup everything once the features for this version have been
    implemented

sting 0.1.1
-------------------------------------------------------------------------------
[x] fix the camera


DONE
-------------------------------------------------------------------------------
[x] add triangle intersection
[x] point lights, with shadow casts and simple lambertian shading
[x] point camera
[x] a buffer for the raytracer to write results to, then every frame
    this buffer gets read from and written to the screen, basically an
    accumulator
[x] rays with sphere intersection, without camera just shoot straight
    ahead
[x] add interactive camera controls
[x] create a window without opengl
[x] add opengl context
[x] setup rendering code for drawing a texture across the whole screen
[x] add cuda test code that writes to a texture
[x] setup cuda opengl interop
