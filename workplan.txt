[ ] Add basic profiling graph
[ ] Clean up main

sting 0.2
-------------------------------------------------------------------------------
Add pathtracing basics to make things pretty kindof :)

stuff with normals: 
[ ] Set default winding order to the triangles to determine normal direction
    and barycentric coordinates orientation. Make this consistent in the code.
    [ ] normal_lerp, RenderTriangle constructor, maybe more

[ ] currently uses world space normals. should use tangent space normals, this
    also makes packing normals a lot simpler and more natural as tangent space
    is used everywhere.

[ ] calculate interpolated normals from triangle soup

[x] next event estimation
    [x] need a list of all the lights
[x] cosine weighted path tracing
[x] basic materials:
    [x] diffuse
    [x] emissive
    [x] mirror
[x] environment map
[x] add normals to triangle mesh
[x] pathtracing!, limit the depth.
[x] accumulator
[x] rng for gpu
[x] looking around with mouse

sting 0.2.1
-------------------------------------------------------------------------------
[ ] give the different rendering functions better names in fillimage.cu
[ ] rename fillimage.cu
[ ] verify the output range of random_u32_max
[ ] ray struct now also contains t_min and t_max, change intersecting
    functions to actually use these if necessary, intersect codes don't need
    to use them

sting 0.3
-------------------------------------------------------------------------------
Adding the wavefront architecture!
[x] basic wavefront architecture
[ ] wavefront with NEE

sting 0.4
-------------------------------------------------------------------------------
The BVH optimization update!

[ ] MBVH instead of BVH
[ ] top level BVH



Just stuff I may want to add or change but not yet planned in
-------------------------------------------------------------------------------
[ ] CUDA hot reloading
[ ] normal packing and unpacking
[ ] multiple importance sampling
[ ] nested instancing (could be cool :D)
[ ] add functionality to have the render buffer size and the screen size
    to be different dimensions
[ ] optimize AABB with SIMD, is not really necessary since we do all aabb
    intersects on the gpu which doesn't have SIMD so...
[ ] improve the camera with fov instead of plane distance, is a bit more
    natural to setup like that
[ ] more materials!
[ ] DOF camera
[ ] variance reduction techniques: russian roulette, next event estimation
[ ] add Disney BRDF (looks pretty?)
[ ] random number generation on the GPU or some sort of pseudo random sampling
    BLUE NOISE!
[ ] also take the skydome into consideration as a direct light for nee, this could
    be a bit tricky but it is possible. there is also some text about this in
    PBRT book.

sting 0.1
-------------------------------------------------------------------------------
This version is meant to have a raytracer that can actually render something
at reasonably interactive frame rate.
It will add BVH acceleration structure and loading of triangle
meshes, with intersection of the BVH on the GPU.

[x] bvh building and intersection
[x] loading triangle meshes
[x] uploading triangle mesh bvh to gpu and intersection on the gpu

[x] cleanup everything once the features for this version have been
    implemented

sting 0.1.1
-------------------------------------------------------------------------------
[x] fix the camera


DONE
-------------------------------------------------------------------------------
[x] add triangle intersection
[x] point lights, with shadow casts and simple lambertian shading
[x] point camera
[x] a buffer for the raytracer to write results to, then every frame
    this buffer gets read from and written to the screen, basically an
    accumulator
[x] rays with sphere intersection, without camera just shoot straight
    ahead
[x] add interactive camera controls
[x] create a window without opengl
[x] add opengl context
[x] setup rendering code for drawing a texture across the whole screen
[x] add cuda test code that writes to a texture
[x] setup cuda opengl interop
